
version : '3.8'
name    : "pingo"

#* ************************************************************************** *#
#*     * Services :                                                           *#
#* ************************************************************************** *#
services:

    #=== api_gateway : =========================================================
    api_gateway:
        image: api-gateway:pingo
        container_name: api_gateway
        build: ./api-gateway
        restart: always
        ports:
            - "443:443"
            - "8080:8080"

        volumes:
            - "./front-end/:/usr/share/nginx/html:ro"
            - "./secrets/certs:/etc/nginx/certs:ro"

            # for Devlopment
            - "./api-gateway/config/conf.d:/etc/nginx/conf.d:ro"

        depends_on:
            - auth_service
            - profileM_service
            - pgadmin
            - message_delivery
            - ws_gateway
            - matchmaking
            - gameplay
            - celery_matchmaking
            - celery_gameplay

    # === postgres : ===========================================================
    postgres:
        image: postgres:17.2
        container_name: postgres
        restart: always
        env_file:
            - ./secrets/postgres.env

        volumes:
            - ./back-end/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
            - postgres_data:/var/lib/postgresql/data


    # === pgadmin : ===========================================================
    pgadmin:
        image: dpage/pgadmin4:8.13.0
        container_name: pgadmin
        restart: always
        env_file:
            - ./secrets/pgadmin.env

        volumes:
            - pgadmin_data:/var/lib/pgadmin


    # === auth_service : ======================================================
    auth_service:
        image: auth-service:pingo
        container_name: auth_service
        build: ./back-end/authentication
        restart: always
        env_file:
            - ./secrets/auth_service.env

        depends_on:
            - postgres

        # for Devlopment
        command: python3 manage.py runserver 0.0.0.0:8000
        volumes:
            - "./back-end/authentication/app:/app"


    # === profile_Management_service : =========================================
    profilem_service:
        image: profilem-service:pingo
        container_name: profileM_service
        build: ./back-end/profile-management
        restart: always
        env_file:
            - ./secrets/profileM_service.env

        depends_on:
            - postgres

        # for Devlopment
        command: python3 manage.py runserver 0.0.0.0:8000
        volumes:
            - "./back-end/profile-management/app:/app"

    # === RabbitMQ : ===========================================================
    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        restart: always
        env_file:
            - ./secrets/rabbitmq.env

        # for Devlopment:
        ports:
            - "5672:5672"
            - "15672:15672"

    # === ws_gateway : =========================================================
    ws_gateway:
        image: ws-gateway:pingo
        container_name: ws_gateway
        build: ./back-end/ws-gateway
        restart: always
        env_file:
            - ./secrets/ws_gateway.env

        #for Devlopment
        volumes:
            - "./back-end/ws-gateway/app:/app"

        ports:
          - "8001:8000"


    # === Message_Delivery : ===================================================
    message_delivery:
        image: message-delivery:pingo
        container_name: message_delivery
        build: ./back-end/message-delivery
        restart: always
        # env_file:
        #     - ./secrets/message_delivery.env

        # for Devlopment
        # command: python3 manage.py runserver 0.0.0.0:8000
        volumes:
            - "./back-end/message-delivery/app:/app"
        # ports:
          # - "8000:8000"


    # === matchmaker : =========================================================
    matchmaking:
        image: matchmaker:pingo
        container_name: matchmaking
        build: ./back-end/matchmaking
        restart: always
        # env_file:
        #     - ./secrets/matchmaker.env

        # for Devlopment
        # command: python3 manage.py runserver 0.0.0.0:8000
        # volumes:
        #     - "./back-end/matchmaker:/app"
        ports:
          - "8000:8000"

    # === gameplay : ===========================================================
    gameplay:
        image: gameplay:pingo
        container_name: gameplay
        build: ./back-end/gameplay
        restart: always
        # env_file:
        #     - ./secrets/gameplay.env

        # for Devlopment
        # command: python3 manage.py runserver 0.0.0.0:8000
        # volumes:
        #     - "./gameplay/app:/app"
        ports:
          - "8003:8001"


    # === celery_matchmaking : =================================================
    celery_matchmaking:
        image: celery-matchmaking:pingo
        container_name: celery_matchmaking
        build: ./back-end/matchmaking
        command: celery -A matchmaking_service worker -l info -Q matchmaking_queue
        restart: always
        depends_on:
          - redis


    # === celery_gameplay : ====================================================
    celery_gameplay:
        image: celery-gameplay:pingo
        container_name: celery_gameplay
        build: ./back-end/gameplay
        command: celery -A gameplay worker -l info -Q gameplay_queue
        restart: always
        depends_on:
          - redis


    # === redis : ==============================================================
    redis:
        image: redis:latest
        container_name: redis
        restart: always
        ports:
            - "6379:6379"



#* ************************************************************************** *#
#*     * Volumes :                                                            *#
#* ************************************************************************** *#
volumes:
  postgres_data:
  pgadmin_data:
